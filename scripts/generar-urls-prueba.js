/**
 * @fileoverview Verificador R√°pido de Filtros - Modo Manual
 * @description Script que genera URLs para probar manualmente en el navegador
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function generarURLsPrueba() {
  try {
    console.log('üöÄ GENERADOR DE URLs PARA PROBAR FILTROS\n');
    
    // Verificar conexi√≥n y datos
    console.log('üîå Verificando datos en base de datos...');
    await prisma.$connect();
    
    const stats = await prisma.convenio.groupBy({
      by: ['estado'],
      _count: { id: true }
    });
    
    const total = await prisma.convenio.count();
    
    console.log(`üìä Total de convenios: ${total}`);
    stats.forEach(stat => {
      console.log(`   ${stat.estado}: ${stat._count.id} convenios`);
    });
    
    console.log('\nüéØ URLs PARA PROBAR EN TU NAVEGADOR:');
    console.log('(Copia y pega estas URLs en tu navegador mientras el servidor est√° corriendo)\n');
    
    const baseUrl = 'http://localhost:3000/api/convenios';
    
    const tests = [
      {
        name: '1. Filtro por Estado Activo',
        url: `${baseUrl}?estado=Activo&debug=true`,
        expected: `Deber√≠a mostrar ${stats.find(s => s.estado === 'Activo')?._count.id || 0} convenios activos`
      },
      {
        name: '2. M√∫ltiples Estados (Activo + Borrador)',
        url: `${baseUrl}?estados=Activo,Borrador&debug=true`,
        expected: 'Deber√≠a mostrar convenios activos y borrador'
      },
      {
        name: '3. Filtro por Fechas (2025)',
        url: `${baseUrl}?fechaInicio=2025-01-01&debug=true`,
        expected: 'Deber√≠a mostrar convenios del 2025'
      },
      {
        name: '4. B√∫squeda de Texto',
        url: `${baseUrl}?busqueda=Universidad&debug=true`,
        expected: 'Deber√≠a mostrar convenios que contengan "Universidad"'
      },
      {
        name: '5. Filtros Combinados',
        url: `${baseUrl}?estado=Activo&fechaInicio=2025-01-01&busqueda=Convenio&debug=true`,
        expected: 'Deber√≠a aplicar todos los filtros juntos'
      },
      {
        name: '6. Paginaci√≥n',
        url: `${baseUrl}?page=1&limit=2&debug=true`,
        expected: 'Deber√≠a mostrar m√°ximo 2 registros'
      },
      {
        name: '7. Todos los Registros',
        url: `${baseUrl}?debug=true`,
        expected: `Deber√≠a mostrar todos los ${total} convenios`
      }
    ];
    
    tests.forEach(test => {
      console.log(`üîó ${test.name}:`);
      console.log(`   ${test.url}`);
      console.log(`   ${test.expected}\n`);
    });
    
    console.log('üìã INSTRUCCIONES:');
    console.log('1. Aseg√∫rate de que el servidor est√© corriendo: npm run dev');
    console.log('2. Copia cualquier URL y √°brela en tu navegador');
    console.log('3. Verifica que los filtros funcionen correctamente');
    console.log('4. Con debug=true ver√°s los logs detallados en la consola del servidor\n');
    
    console.log('‚úÖ URLs generadas exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

generarURLsPrueba();